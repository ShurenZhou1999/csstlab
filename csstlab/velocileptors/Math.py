
def f2m_ConfluentHypergeometric(m, n, B):
    '''
    return 
    $$
    f_n^{2m}(B) = \left({2\over B}\right)^m\, U(-m, n-m+1, {B\over 2})
    $$
    where $U(a, b, z)$ is the confluent hypergeometric function of the second kind.
    '''
    if m==0:
        return 1
    elif m==1:
        return 1 -  2*n/B
    elif m==2:
        return 1 -  4*n/B +  4*n*(n-1)/B**2
    elif m==3:
        return 1 -  6*n/B + 12*n*(n-1)/B**2 -  8*n*(n-1)*(n-2)/B**3
    elif m==4:
        return 1 -  8*n/B + 24*n*(n-1)/B**2 - 32*n*(n-1)*(n-2)/B**3 + 16*n*(n-1)*(n-2)*(n-3)/B**4
    elif m==5:
        return 1 - 10*n/B + 40*n*(n-1)/B**2 - 80*n*(n-1)*(n-2)/B**3 + 80*n*(n-1)*(n-2)*(n-3)/B**4 - 32*n*(n-1)*(n-2)*(n-3)*(n-4)/B**5
    elif m==6:
        return 1 - 12*n/B + 60*n*(n-1)/B**2 -160*n*(n-1)*(n-2)/B**3 +240*n*(n-1)*(n-2)*(n-3)/B**4 -192*n*(n-1)*(n-2)*(n-3)*(n-4)/B**5 \
                + 64*n*(n-1)*(n-2)*(n-3)*(n-4)/B**5
    elif m==7:
        return 1 - 14*n/B + 84*n*(n-1)/B**2 -280*n*(n-1)*(n-2)/B**3 +560*n*(n-1)*(n-2)*(n-3)/B**4 -672*n*(n-1)*(n-2)*(n-3)*(n-4)/B**5 \
                + 448*n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)/B**6 - 128*n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)/B**7
    elif m==8:
        return 1 - 16*n/B +112*n*(n-1)/B**2 -448*n*(n-1)*(n-2)/B**3 + 1120*n*(n-1)*(n-2)*(n-3)/B**4 - 1792*n*(n-1)*(n-2)*(n-3)*(n-4)/B**5 \
                + 1792*n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)/B**6 - 1024*n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)/B**7 \
                + 256*n*(n-1)*(n-2)*(n-3)*(n-4)*(n-5)*(n-6)*(n-7)/B**8
    else:
        return None






class Integral_mun_Pell:
    '''
    the integral 
    $$
    {1\over 2} i^\ell\, (2\ell+1) \int_{-1}^{1}\rmd\mu\, P_\ell(\mu)\, \mu^n
    $$
    ''
    '''
    def __init__(self, ):
        self.table_ell_n = [
            [1, 0, 1/3, 0, 1/5, 0, 1/7, 0, 1/9, 0, 1/11, 0, 1/13], 
            [0, -1j, 0, -3j/5, 0, -3j/7, 0, -1j/3, 0, -3j/11, 0, -3j/13, 0], 
            [0, 0, -2/3, 0, -4/7, 0, -10/21, 0, -40/99, 0, -50/143, 0, -4/13], 
            [0, 0, 0, 2j/5, 0, 4j/9, 0, 14j/33, 0, 56j/143, 0, 14j/39, 0], 
            [0, 0, 0, 0, 8/35, 0, 24/77, 0, 48/143, 0, 48/143, 0, 72/221], 
            [0, 0, 0, 0, 0, -8j/63, 0, -8j/39, 0, -16j/65, 0, -176j/663, 0], 
            [0, 0, 0, 0, 0, 0, -16/231, 0, -64/495, 0, -32/187, 0, -64/323], 
            [0, 0, 0, 0, 0, 0, 0, 16j/429, 0, 192j/2431, 0, 480j/4199, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 128/6435, 0, 128/2717, 0, 128/1729], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, -128j/12155,  0, -128j/4641, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256/46189, 0, -1536/96577], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256j/88179, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024/676039]
  ]
        ## convert `i` to `-1`
        ## since in the KECLEFT, there is always odd power of `ik` with odd power of `\mu` integral
        self.table_replace_1j = [
            [1, 0, 1/3, 0, 1/5, 0, 1/7, 0, 1/9, 0, 1/11, 0, 1/13], 
            [0, 1, 0, 3/5,0, 3/7, 0, 1/3, 0, 3/11, 0, 3/13, 0], 
            [0, 0, -2/3, 0, -4/7, 0, -10/21, 0, -40/99, 0, -50/143, 0, -4/13], 
            [0, 0, 0, -2/5, 0, -4/9, 0, -14/33, 0, -56/143, 0, -14/39, 0], 
            [0, 0, 0, 0, 8/35, 0, 24/77, 0, 48/143, 0, 48/143, 0, 72/221], 
            [0, 0, 0, 0, 0, 8/63, 0, 8/39, 0, 16/65, 0, 176/663, 0], 
            [0, 0, 0, 0, 0, 0, -16/231, 0, -64/495, 0, -32/187, 0, -64/323], 
            [0, 0, 0, 0, 0, 0, 0, -16/429, 0, -192/2431, 0, -480/4199, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 128/6435, 0, 128/2717, 0, 128/1729], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 128/12155, 0, 128/4641, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256/46189, 0, -1536/96577], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -256/88179, 0], 
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1024/676039]
        ]

    def __call__(self, ell, n):
        return self.table_replace_1j[ell][n]